import unittest
from Midterm_Assignment import floyd2

class TestFloyd_Algo(unittest.TestCase):
    def test_floyd2(self):
        graph = [[0, 2, 5, float('inf'), float('inf')],
                [float('inf'), 0, 7, 1, 8],
                [float('inf'), float('inf'), 0, 4, float('inf')],
                [float('inf'), float('inf'), float('inf'), 0, 3],
                [float('inf'), float('inf'), 2, float('inf'), 0]]
        expected_result = [[0, 2, 5, 3, 6], [float('inf'), 0, 7, 1, 4], [float('inf'), float('inf'), 0, 4, 7], [float('inf'), float('inf'), 5, 0, 3], [float('inf'), float('inf'), 2, 6, 0]]
        self.assertEqual(floyd2(graph), expected_result)  
        
        graph2 = [[0, 1, 3, float('inf')], [float('inf'), 0, 1, 2], [float('inf'), float('inf'), 0, 1], [float('inf'), float('inf'), float('inf'), 0]]
        expected_result2 = [[0, 1, 2, 3], [float('inf'), 0, 1, 2], [float('inf'), float('inf'), 0, 1], [float('inf'), float('inf'), float('inf'), 0]]
        self.assertEqual(floyd2(graph2), expected_result2)

        graph3 = [[0, 1, 3, 4], [float('inf'), 0, 1, 2], [float('inf'), float('inf'), 0, 1], [float('inf'), float('inf'), float('inf'), 0]]
        expected_result3 = [[0, 1, 2, 3], [float('inf'), 0, 1, 2], [float('inf'), float('inf'), 0, 1], [float('inf'), float('inf'), float('inf'), 0]]
        self.assertEqual(floyd2(graph3), expected_result3)

if __name__ == '__main__':
    unittest.main()
